<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ECR | A Rambling On</title>
    <link>/tag/ecr/</link>
      <atom:link href="/tag/ecr/index.xml" rel="self" type="application/rss+xml" />
    <description>ECR</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 15 Jun 2023 02:14:14 -0700</lastBuildDate>
    <image>
      <url>/img/Bayes.jpg</url>
      <title>ECR</title>
      <link>/tag/ecr/</link>
    </image>
    
    <item>
      <title>CI/CD Part 4: Container Registries</title>
      <link>/post/cicd-4-cr/</link>
      <pubDate>Thu, 15 Jun 2023 02:14:14 -0700</pubDate>
      <guid>/post/cicd-4-cr/</guid>
      <description>&lt;p&gt;This is the last post in a mini-series on 
&lt;a href=&#34;/post/cicd-1-config/&#34;&gt;designing Gitlab CI/CD pipelines&lt;/a&gt;.  We&amp;rsquo;ve discussed the basic anatomy of a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file, how to set up authentication tokens and files for building and pushing packages to a registry, and designing a Dockerfile for building images from a package in the context of a CI/CD pipeline.  In this post, I&amp;rsquo;m going to show how to push your package to a remote AWS Elastic Container Registry (ECR).&lt;/p&gt;
&lt;p&gt;The structure of this CI/CD job will be analogous to the CI/CD job defined at the end of our first 
&lt;a href=&#34;/post/cicd-1-config/&#34;&gt;post&lt;/a&gt;, where we pushed an image to the Gitlab Container Registry.&lt;/p&gt;
&lt;h4 id=&#34;setting-up-aws-variables&#34;&gt;Setting up AWS variables&lt;/h4&gt;
&lt;p&gt;To build images, tag them, and push them to the remote AWS ECR, I used the definition of a CI/CD job below.  In addition to pre-defined variables that are set internally by Gitlab, we can also manually pre-define variables.  In this case, I&amp;rsquo;ve set a few that allow me to interact with AWS via the command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWS_DEFAULT_REGION&lt;/code&gt;: self-explanatory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ECR_REPO_LAMBDA&lt;/code&gt;: &lt;code&gt;${AWS_ACCOUNT_ID}&lt;/code&gt;.dkr.ecr.&lt;code&gt;${AWS_DEFAULT_REGION}&lt;/code&gt;.amazonaws.com/&lt;code&gt;${YOUR_ECR_REPO_NAME}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt;: AWS account ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_ACCESS_KEY&lt;/code&gt;: this is the information contained in the downloaded *.pem file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;: this is the information contained in the downloaded *.pem file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To set variables that are accessible by CI/CD jobs, go to your &lt;strong&gt;Project/Group &amp;gt; Settings &amp;gt; CI/CD &amp;gt; Variables &amp;gt; Expand&lt;/strong&gt; and define the variables of interest:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./CICD.VariableTab.png&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;./CICD.Variables.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you define these variables at the Gitlab Group level, they will be propagated down to the project level, so long as the Project falls under the Group scope.&lt;/p&gt;
&lt;h4 id=&#34;pushing-to-aws-ecr-via-cicd-job&#34;&gt;Pushing to AWS ECR via CI/CD job&lt;/h4&gt;
&lt;p&gt;Below, we define the actual CI/CD job.   There were two aspects here that I needed to solve.  First, I needed access to a Docker-in-Docker build image e.g. an image that had Docker installed.  And second, this image also needed to have the AWS CLI tool installed.  To that end, I used the &lt;code&gt;bentolor/docker-dind-awscli&lt;/code&gt; 
&lt;a href=&#34;https://github.com/bentolor/docker-dind-awscli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;image&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;build-image-ecr:
  stage: deploy 
  image: bentolor/docker-dind-awscli
  services:
    - docker:dind
  variables:
    # convenience variable indicating name of the image with respect to the ECR repo and unique tag ID
    IMAGE_TAG: $ECR_REPO_LAMBDA:$CI_COMMIT_SHORT_SHA

  before_script:
    - docker info
    # authenticate docker with your AWS ECR account
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  # will push Docker image to AWS ECR
  script:
    # build the docker imagae
    - docker build --compress -t ${IMAGE_TAG} .
    # tag the image with a unique name
    - docker tag ${IMAGE_TAG} $ECR_REPO_LAMBDA:latest
    # push the image to the ECR
    - docker push ${IMAGE_TAG}

  # here, we only build and push the image if this is a merge event into the &amp;quot;main&amp;quot; branch
  rules:
    - if: $CI_PIPELINE_SOURCE == &#39;merge_request_event&#39; &amp;amp;&amp;amp; $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == &amp;quot;main&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And voila!  You have now pushed your built image to a remote container registry!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

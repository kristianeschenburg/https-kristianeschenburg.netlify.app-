<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spatial densities | A Rambling On</title>
    <link>/tag/spatial-densities/</link>
      <atom:link href="/tag/spatial-densities/index.xml" rel="self" type="application/rss+xml" />
    <description>spatial densities</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 10 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/Bayes.jpg</url>
      <title>spatial densities</title>
      <link>/tag/spatial-densities/</link>
    </image>
    
    <item>
      <title>fieldmodel</title>
      <link>/project/fieldmodel/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/project/fieldmodel/</guid>
      <description>&lt;p&gt;This is a Python package for fitting densities to scalar fields distributed on the domain of regular meshes.  This package is an implementation of the methodology described 
&lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/23110879/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.  Rather than using the spatial coordinates of the mesh on which the data is distributed, this package fits isotropic distributions using the geodesic distances between mesh vertices.&lt;/p&gt;
&lt;p&gt;Given a scalar field assigning, let&amp;rsquo;s say, elevation values to latitude-longitude coordinates of Mount Rainier, we could use &lt;strong&gt;fieldmodel&lt;/strong&gt; to fit a Gaussian distribution to this elevation profile.  The output of this fitting procedure would be 2 parameters: a &lt;code&gt;mean&lt;/code&gt; parameter (centered on the true summit coordinates) and a &lt;code&gt;sigma&lt;/code&gt; parameter, a measure of how quickly the elevation profile decays as we move away from the summit.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-model-convergence-in-synthetic-data&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/project/fieldmodel/rainier_hu5d2e9382f73667cb57e9f1f1ea45c0f7_123667_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Model convergence in synthetic data.&#34;&gt;


  &lt;img data-src=&#34;/project/fieldmodel/rainier_hu5d2e9382f73667cb57e9f1f1ea45c0f7_123667_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;494&#34; height=&#34;490&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Model convergence in synthetic data.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The code iterates over all possible &lt;code&gt;mean&lt;/code&gt; locations in a set, and optimizes the &lt;code&gt;sigma&lt;/code&gt; parameter using a &lt;strong&gt;BFGS&lt;/strong&gt; minimization procedure.  I provide 3  optimality criteria options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;maximization of spatial correlation&lt;/li&gt;
&lt;li&gt;maximization of signal amplitude&lt;/li&gt;
&lt;li&gt;minimization of least-squares error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Along with fitting procedure, &lt;strong&gt;fieldmodel&lt;/strong&gt; also offers some basic plotting functionality to visualize the fitted densities alongside the data to which those densities were fit.&lt;/p&gt;
&lt;h2 id=&#34;how-to-install-and-use&#34;&gt;How to install and use:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kristianeschenburg/fieldmodel.git
cd  ./fieldmodel
pip install .
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-application-to-synthetic-data&#34;&gt;Example application to synthetic data:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import scipy.io as sio

# Create fake distance matrix between and fake scalar map

# x coordinates for plotting
tx_file = &#39;../data/target.X.mat&#39;
tx = sio.loadmat(tx_file)[&#39;x&#39;].squeeze()

# y coordinates for plotting
ty_file = &#39;../data/target.Y.mat&#39;
ty = sio.loadmat(ty_file)[&#39;y&#39;].squeeze()

# geodesic distance matrix between vertices
dist_file = &#39;../data/distance.mat&#39;
dist = sio.loadmat(dist_file)[&#39;apsp&#39;]

# scalar field
field_file = &#39;../data/scalar_field.mat&#39;
field = sio.loadmat(field_file)[&#39;field&#39;].squeeze()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can instantiate and fit our fieldmodel.  For more detail on the parameters, please refer to the &lt;code&gt;docstring&lt;/code&gt; or &lt;code&gt;Demo.ipynb&lt;/code&gt; in the &lt;code&gt;demos&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fieldmodel import GeodesicFieldModel as GFM

# instantiate field model
G = GFM.FieldModel(r=10, amplitude=False,
                    peak_size=15, hood_size=20,
                    verbose=False, metric=&#39;pearson&#39;)

# fit field model
G.fit(data=field, distances=dist, x=tx, y=ty)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can visualize the results of our model via the &lt;code&gt;plot&lt;/code&gt; method in &lt;code&gt;GFM.fieldmodel&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;G.plot(field=&#39;pdf&#39;)
G.plot(field=&#39;amplitude&#39;)
G.plot(field=&#39;sigma&#39;)
&lt;/code&gt;&lt;/pre&gt;





  
  











&lt;figure id=&#34;figure-fitted-fieldmodel-density&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/project/fieldmodel/pdf_hu5198acae7b46ecb9e697721f643f0ffb_61407_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Fitted fieldmodel density.&#34;&gt;


  &lt;img data-src=&#34;/project/fieldmodel/pdf_hu5198acae7b46ecb9e697721f643f0ffb_61407_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;647&#34; height=&#34;302&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Fitted fieldmodel density.
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-estimated-model-amplitude-for-each-candidate-mean-location&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/project/fieldmodel/amplitude_huefc18c93caf304dc635a2b50ed6a8bbc_60179_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Estimated model amplitude for each candidate mean location.&#34;&gt;


  &lt;img data-src=&#34;/project/fieldmodel/amplitude_huefc18c93caf304dc635a2b50ed6a8bbc_60179_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;641&#34; height=&#34;286&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Estimated model amplitude for each candidate mean location.
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-estimated-model-sigma-for-each-candidate-mean-location&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/project/fieldmodel/sigma_huefc18c93caf304dc635a2b50ed6a8bbc_57686_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Estimated model sigma for each candidate mean location.&#34;&gt;


  &lt;img data-src=&#34;/project/fieldmodel/sigma_huefc18c93caf304dc635a2b50ed6a8bbc_57686_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;625&#34; height=&#34;286&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Estimated model sigma for each candidate mean location.
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>
